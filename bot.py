from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from datetime import datetime

TOKEN = '8006807477:AAGfPJlqN0cvIHifoUnVhcy4V_tbHxM5hDw'
CHANNEL_USERNAME = 'shadow_wa_rent'  # –£–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @
ADMIN_ID = 5858064222  # –£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

#–°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
#–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
linked_numbers = {}  # –°–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {user_id: {"number": str, "linked_time": datetime}}
archive = []  # –ê—Ä—Ö–∏–≤: [{"user_id": int, "number": str, "linked_time": datetime, "failed_time": datetime}]
user_data = {}
pending_numbers = {}
stats = {
    "users_stats": {}
}

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

# –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu_inline = InlineKeyboardMarkup(row_width=1)
menu_buttons = [
    InlineKeyboardButton("1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="add_number"),
    InlineKeyboardButton("2. –í –æ—á–µ—Ä–µ–¥–∏", callback_data="view_queue"),
    InlineKeyboardButton("3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="view_stats"),
    InlineKeyboardButton("4. –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="end_work")
]
for btn in menu_buttons:
    main_menu_inline.add(btn)

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"
start_work_button = InlineKeyboardMarkup(row_width=1)
start_work_button.add(InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="start_work"))

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
confirm_buttons = InlineKeyboardMarkup(row_width=2)
confirm_buttons.add(
    InlineKeyboardButton("+", callback_data="confirm_+"),
    InlineKeyboardButton("-", callback_data="confirm_-")
)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(f"@shadow_wa_rent", user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# –•—ç–Ω–¥–ª–µ—Ä—ã
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {"is_subscribed": False, "working": True}
        stats["users_stats"][user_id] = {"linked": 0, "failed": 0}
    is_subscribed = await check_subscription(user_id)
    if is_subscribed:
        user_data[user_id]["is_subscribed"] = True
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=main_menu)
    else:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.")
        
@dp.message_handler(commands=["stats"])
async def view_user_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id not in user_stats:
        await message.reply("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    linked = user_stats[user_id]["linked"]
    failed = user_stats[user_id]["failed"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"‚úÖ –°–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {linked}\n"
        f"‚ùå –°–ª–µ—Ç–µ–≤—à–∏–µ –Ω–æ–º–µ—Ä–∞: {failed}\n"
    )
       

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    admin_menu = InlineKeyboardMarkup(row_width=2)
    admin_menu.add(
        InlineKeyboardButton("üìÑ –í–ó–Ø–¢–´–ï –Ω–æ–º–µ—Ä–∞", callback_data="view_linked_numbers"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="delete_number"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")
    )

    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu)


@dp.callback_query_handler(lambda c: c.data == "view_linked_numbers")
async def view_linked_numbers(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìÑ –í–ó–Ø–¢–´–ï –Ω–æ–º–µ—Ä–∞'."""
    if not linked_numbers:
        await callback_query.message.edit_text("üìÑ –í–ó–Ø–¢–´–ï –Ω–æ–º–µ—Ä–∞:\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.")
        return

    for user_id, data in linked_numbers.items():
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–º–µ—Ä–µ
        response = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
            f"üìû –ù–æ–º–µ—Ä: {data['number']}\n"
            f"‚è± –í—Ä–µ–º—è —Å–≤—è–∑–∫–∏: {data['timestamp']}\n\n"
        )
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        number_menu = InlineKeyboardMarkup(row_width=2)
        number_menu.add(
            InlineKeyboardButton("‚ùå –°–ª–µ—Ç", callback_data=f"mark_failed_{user_id}"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_refresh")
        )
        await callback_query.message.answer(response, reply_markup=number_menu)


@dp.callback_query_handler(lambda c: c.data.startswith("mark_failed_"))
async def mark_failed(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π."""
    user_id = int(callback_query.data.split("_")[2])

    if user_id not in linked_numbers:
        await callback_query.answer("–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–ª–∏ —Å–ª–µ—Ç–µ–ª.", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∞—Ä—Ö–∏–≤
    failed_data = linked_numbers.pop(user_id)
    failed_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    archive.append({
        "user_id": user_id,
        "number": failed_data['number'],
        "linked_time": failed_data['timestamp'],
        "failed_time": failed_time
    })

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ª–µ—Ç–µ
    await bot.send_message(
        user_id,
        f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {failed_data['number']} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π.\n\n"
        f"‚è± –í—Ä–µ–º—è —Å–≤—è–∑–∫–∏: {failed_data['timestamp']}\n"
        f"‚è± –í—Ä–µ–º—è —Å–ª–µ—Ç–∞: {failed_time}"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await callback_query.message.edit_text(
        f"–ù–æ–º–µ—Ä {failed_data['number']} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π.\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–≤–µ–¥–æ–º–ª—ë–Ω."
    )
    await callback_query.answer("–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä"
@dp.callback_query_handler(lambda c: c.data == "delete_number")
async def delete_number_menu(callback_query: types.CallbackQuery):
    if not linked_numbers:
        await callback_query.message.edit_text("–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    delete_menu = InlineKeyboardMarkup(row_width=1)
    for user_id, data in linked_numbers.items():
        delete_menu.add(InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {data['number']}", callback_data=f"delete_{user_id}"))

    delete_menu.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_refresh"))
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=delete_menu)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith("delete_"))
async def handle_delete_number(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    if user_id in linked_numbers:
        deleted_number = linked_numbers.pop(user_id)
        await callback_query.message.edit_text(
            f"–ù–æ–º–µ—Ä {deleted_number['number']} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∑—è—Ç—ã—Ö –Ω–æ–º–µ—Ä–æ–≤."
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await bot.send_message(
            ADMIN_ID,
            f"‚ùå –£–¥–∞–ª—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
            f"üìû –ù–æ–º–µ—Ä: {deleted_number['number']}\n"
        )
    else:
        await callback_query.answer("–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.callback_query_handler(lambda c: c.data == "admin_stats")
async def admin_stats(callback_query: types.CallbackQuery):
    total_pending = len(pending_numbers)
    total_linked = len(linked_numbers)

    response = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üîπ –í –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {total_pending}\n"
        f"üîπ –°–≤—è–∑–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {total_linked}\n"
    )

    await callback_query.message.edit_text(response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"
@dp.callback_query_handler(lambda c: c.data == "admin_refresh")
async def refresh_admin_panel(callback_query: types.CallbackQuery):
    admin_menu = InlineKeyboardMarkup(row_width=2)
    admin_menu.add(
        InlineKeyboardButton("üìÑ –í–ó–Ø–¢–´–ï –Ω–æ–º–µ—Ä–∞", callback_data="view_linked_numbers"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="delete_number"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")
    )

    await callback_query.message.edit_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu)

@dp.message_handler(lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def show_main_menu(message: types.Message):
    user_id = message.from_user.id
    if not user_data[user_id]["working"]:
        await message.answer("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É. –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.", reply_markup=start_work_button)
        return
    is_subscribed = await check_subscription(user_id)
    if is_subscribed:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_inline)
    else:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
@dp.callback_query_handler(lambda c: c.data == "add_number")
async def handle_add_number(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ +7). –ü—Ä–∏–º–µ—Ä: 9123456789")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞, –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@dp.message_handler(lambda message: message.text.isdigit() and len(message.text) == 10)
async def handle_number(message: types.Message):
    user_id = message.from_user.id
    number = message.text
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è
    pending_numbers[user_id] = {"number": number, "timestamp": timestamp}

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await bot.send_message(
        ADMIN_ID,
        f"üì• –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
        f"üìû –ù–æ–º–µ—Ä: {number}\n"
        f"‚è± –í—Ä–µ–º—è: {timestamp}\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ñ–æ—Ç–æ —Å –∫–æ–¥–æ–º."
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo_with_buttons(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    if message.reply_to_message and "üìû –ù–æ–º–µ—Ä:" in message.reply_to_message.text:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            lines = message.reply_to_message.text.splitlines()
            number_line = next((line for line in lines if line.startswith("üìû –ù–æ–º–µ—Ä:")), None)
            user_line = next((line for line in lines if line.startswith("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:")), None)

            if not number_line or not user_line:
                raise ValueError("–ù–æ–º–µ—Ä –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ.")

            number = number_line.replace("üìû –ù–æ–º–µ—Ä: ", "").strip()
            user_id = int(user_line.replace("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ", "").strip())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö
            if user_id not in pending_numbers or pending_numbers[user_id]["number"] != number:
                raise ValueError("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è.")

            # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
            confirm_buttons = InlineKeyboardMarkup(row_width=2)
            confirm_buttons.add(
                InlineKeyboardButton("‚úÖ ", callback_data=f"confirm_yes_{user_id}"),
                InlineKeyboardButton("‚ùå ", callback_data=f"confirm_no_{user_id}")
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_photo(
                user_id,
                photo=message.photo[-1].file_id,
                caption=f"–í–∞—à –Ω–æ–º–µ—Ä {number}. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å —Ñ–æ—Ç–æ, –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
                reply_markup=confirm_buttons
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await message.reply("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û–∂–∏–¥–∞–µ—Ç—Å—è –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞: {e}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
    else:
        await message.reply("–û—à–∏–±–∫–∞: —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –Ω–æ–º–µ—Ä–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith("confirm_"))
async def handle_confirmation(callback_query: types.CallbackQuery):
    data = callback_query.data.split("_")
    action = data[1]
    user_id = int(data[2])

    if user_id not in pending_numbers:
        await callback_query.answer("–ù–æ–º–µ—Ä —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return

    if action == "yes":
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
        number = pending_numbers[user_id]["number"]
        timestamp = pending_numbers[user_id]["timestamp"]

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –≤–∑—è—Ç—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        linked_numbers[user_id] = {"number": number, "timestamp": timestamp}

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await bot.send_message(
            ADMIN_ID,
            f"‚úÖ –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
            f"üìû –ù–æ–º–µ—Ä: {number}\n"
            f"‚è± –í—Ä–µ–º—è: {timestamp}"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.message.edit_caption("–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω. –°–ø–∞—Å–∏–±–æ!")
        del pending_numbers[user_id]
    elif action == "no":
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
        await callback_query.message.edit_caption("–ù–æ–º–µ—Ä –Ω–µ —Å–≤—è–∑–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        del pending_numbers[user_id]

    await callback_query.answer("–í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

@dp.callback_query_handler(lambda c: c.data == "view_queue")
async def view_queue(callback_query: types.CallbackQuery):
    await callback_query.message.answer(f"–í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(pending_numbers)}.")
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == "view_stats")
async def view_stats(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_stats = stats["users_stats"][user_id]
    await callback_query.message.answer(
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –°–≤—è–∑–∞–Ω–æ: {user_stats['linked']}\n"
        f"- –û—à–∏–±–æ–∫: {user_stats['failed']}"
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == "end_work")
async def end_work(callback_query: types.CallbackQuery):
    user_data[callback_query.from_user.id]["working"] = False
    await callback_query.message.answer("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É. –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.", reply_markup=start_work_button)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == "start_work")
async def start_work(callback_query: types.CallbackQuery):
    user_data[callback_query.from_user.id]["working"] = True
    await callback_query.message.answer("–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_menu)
    await bot.answer_callback_query(callback_query.id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)